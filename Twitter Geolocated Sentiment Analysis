#Call packages
pkgs <- c('dplyr','twitteR','RJSONIO','RCurl','ROAuth','streamR')
lapply(pkgs, library, character.only=T)

# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))

#Access
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "KEY" # Replace KEY with actual API key 
consumerSecret <- "SECRET" # Replace secret with actual API secret 
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
                             consumerSecret=consumerSecret,
                             requestURL=reqURL,
                             accessURL=accessURL,
                             authURL=authURL)
#Log in
twitCred$handshake()
####################### Run everything above this line first


#Validate credentials
registerTwitterOAuth(twitCred)

setwd("C:/...") # Set directory containing Pos/NegWords.txt

# Dicts
pos = scan('PosWords.txt', what = 'character', comment.char = ';')
neg = scan('NegWords.txt', what = 'character', comment.char = ';')

# Vectorize
pos.words = c(pos)
neg.words = c(neg)

# Score corpus using positive and negative weights (wordcount from pos/neg dict)
score.sentiment = function(sentences, pos.words, neg.words, .progress='none')
{
  require(plyr)
  require(stringr)
  
  # List conversion
  scores = laply(sentences, function(sentence, pos.words, neg.words) {
    
    # De-regex
    sentence = gsub('[[:punct:]]', '', sentence)
    sentence = gsub('[[:cntrl:]]', '', sentence)
    sentence = gsub('\\d+', '', sentence)
    # Lower case:
    sentence = tolower(sentence)
    
    # split into words
    word.list = str_split(sentence, '\\s+')
    # De-nest
    words = unlist(word.list)
    
    # Dict comparison
    pos.matches = match(words, pos.words)
    neg.matches = match(words, neg.words)
    
    # Boolean 1/0
    pos.matches = !is.na(pos.matches)
    neg.matches = !is.na(neg.matches)
    
    # Sum boolean
    score = sum(pos.matches) - sum(neg.matches)
    
    return(score)
  }, pos.words, neg.words, .progress=.progress )
  
  scores.df = data.frame(score=scores, text=sentences)
  return(scores.df)
}

# Sub out furter regular expressions, lowercase, remove nulls
clean.text <- function(some_txt)
{
  some_txt = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", some_txt)
  some_txt = gsub("@\\w+", "", some_txt)
  some_txt = gsub("[[:punct:]]", "", some_txt)
  some_txt = gsub("[[:digit:]]", "", some_txt)
  some_txt = gsub("http\\w+", "", some_txt)
  some_txt = gsub("[ \t]{2,}", "", some_txt)
  some_txt = gsub("^\\s+|\\s+$", "", some_txt)
  some_txt = gsub("Ã­ Â½Ã­Â²â", "", some_txt)
  some_txt = gsub("<ed><U+00A0><U+00BD><ed><U+00B2><U+0096>","",some_txt)
  # define "tolower error handling" function
  try.tolower = function(x)
  {
    y = NA #
    try_error = tryCatch(tolower(x), error=function(e) e)
    if (!inherits(try_error, "error"))
      y = tolower(x)
    return(y)
  }
  
  some_txt = sapply(some_txt, try.tolower)
  some_txt = some_txt[some_txt != ""]
  names(some_txt) = NULL
  return(some_txt)
}

#Create data frame from tweet search
Tags <- "I'm at, I'm in, I'm on"

filterStream(file.name='checkins.json',track=Tags, language='en',timeout=120,oauth=twitCred, verbose=T)

tweetdf <- parseTweets('checkins.json')


# use clean.text function over tweet corpus
clean <- clean.text(tweetdf$text)

# Create calcuated column: 
# Find substring 
# Classify substring then place in new column.
tweetdf$placeType <- ifelse(grepl("restaurant", tweetdf$text, ignore.case = T), "Eat", 
                             ifelse(grepl("bar", tweetdf$text, ignore.case = T), "Drink", "?")) # Text

sent <- score.sentiment(clean,pos,neg) # Use score.sentiment over 'cleaned' corpus 

tweetdf$score <- sent$score # Insert every score into new tweetdf column

tweetdf$created_at <- substr(tweetdf$created_at, 12, 19) # Leave only HH:MM:SS timestamp

# Filter out lat/long null rows
# Create 2 calculated columns
# Select existing and new columns to create new table tweetdf_coord
tweetdf_coord <- tweetdf %>%
  filter(!is.na(lat),!is.na(lon)) %>%
  mutate(avglat = (lat + place_lat) / 2, avglon = (lon + place_lon) / 2) %>%
  select(text,avglat,avglon,created_at, score)

write.csv(tweetdf_coord,'output.csv')
